/* 2-2 
1. 서로다른 희소행열 만들기
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define matrix_size 8

typedef struct matrix{
	int rows;  //행
	int cols;  //열
	int value;  //랜덤값
}Smatrix;

void input_matrix(int **ary,int value_cnt);
void print_matrix(int **ary);
void input_sparce(int **ary,int value_cnt, Smatrix *sparce);
void print_sparce(Smatrix *sparce,int cnt);
void free_ary(int **ary);

int main(void)
{
    srand(time(NULL));
    int value_cnt;

    int **ary = (int**)malloc(sizeof(int*) *matrix_size);
    for (int i = 0; i < matrix_size; i++) 
        ary[i] = (int*)malloc(sizeof(int) *matrix_size); 
    

    printf("원소 갯수를 입력하세요 :");
    scanf("%d",&value_cnt);

    input_matrix(ary,value_cnt);
    print_matrix(ary);

    Smatrix *sparce;
    printf("\nsparce matrix \n");
    input_sparce(ary,value_cnt,sparce);
    print_sparce(sparce, value_cnt);
    
    free_ary(ary);
}

void input_matrix(int **ary,int value_cnt)
{
    int tmp_row, tmp_col, tmp_value,i=0;

    while(value_cnt != 0){
        tmp_row = rand()%matrix_size; 
        tmp_col = rand()%matrix_size;
        tmp_value = rand()%100;
        
        if(ary[tmp_row][tmp_col] == 0){ //0 일때만 랜덤값 입력
            ary[tmp_row][tmp_col] = tmp_value;
            value_cnt--;
        }
    }
}

void print_matrix(int **ary)
{
    int i, j;

    for(i = 0; i < matrix_size; i++){
        for(j = 0; j < matrix_size; j++){
            printf("%5d",ary[i][j]);
        }
        putchar('\n');
    }
}

void input_sparce(int **ary,int value_cnt, Smatrix *sparce)
{
    int i, j;

	int num = 0;
	for (i = 0;i < matrix_size; i++)
	{
		for (j = 0;j < matrix_size; j++)
			if (ary[i][j] > 0) // data가 있으면 정보 입력
			{
				sparce[num].rows = i; 
				sparce[num].cols = j;
				sparce[num].value = ary[i][j];
				num++;
			}
	}
}

void print_sparce(Smatrix *sparce,int cnt)
{
    printf("%4d %4d %4d\n",matrix_size, matrix_size,cnt);
	int i;
	for (i = 0;i < cnt; i++)
		printf("%4d %4d %4d\n", sparce[i].rows, sparce[i].cols, sparce[i].value);
		putchar('\n');
}

void free_ary(int **ary)
{
    int i;
    for(i = 0; i < matrix_size; i++)
        free(ary[i]);

    free(ary);
}
//원소 갯수를 입력하세요 :4
//    0   98    0    0    0    0    0    0
//    0    0    0    0    0    0    0    0
//    0    0    0    0    0    0    0   40
//    0    0    0    0    0    0    0    0
//    0    0    0    0    0    0   91    0
//    0    0    0    0    0    0    0    0
//    0    0    0    0    0    0    0    0
//   15    0    0    0    0    0    0    0
//
//sparce matrix 
//   8    8    4
//   0    1   98
//   2    7   40
//   4    6   91
//   7    0   15


//2. 희소행렬(sparse matrix) 파일 a.txt을 사용하여 전치행렬(transpose matrix)을 구함
#include <stdio.h>

typedef struct txt{
    int row;
    int col;
    int value;
}txt;

void print_a_txt(FILE *fp,txt *a);
void transpose(txt *a, txt *b);
void printf_transpose(txt * b);

int main(void)
{
    FILE *fp = fopen("a.txt","r");

    txt a[9]; //atxt 
    txt b[9]; 

    print_a_txt(fp,a);

    transpose(a,b);
    printf_transpose(b);

}

void print_a_txt(FILE *fp, txt *a)
{
    int i;
    for(i = 0; i < 9; i++){
        fscanf(fp, "%d %d %d",&a[i].row,&a[i].col,&a[i].value);
    }

    for(i = 0; i < 9; i++){
        printf( "%d %d %d \n",a[i].row,a[i].col,a[i].value);
    }
}

void transpose( txt *a, txt *b)
{
    int rowTerms[9], startingPos[9];
    int i, j;
    int value = a[0].value;

    b[0].row = a[0].col;
    b[0].col = a[0].row;
    b[0].value = value;

    if(value != 0){
        for(i = 0; i < value; i++)
            rowTerms[i] = 0; //rowterms 0으로 초기화

        for(i = 1; i <= value; i++)
            rowTerms[a[i].col]++; //열이 행으로 바꿀때 원소가 몇개 있는지 ++
        
        startingPos[0] = 1; //a[0] 밑 a[1]부터 시작하니까 무조건 1

        for(i = 1; i < value; i++)
            startingPos[i] = startingPos[i - 1] + rowTerms[i - 1]; //statingPos 전값이랑 row전값 더한게 이번값

        for(i = 1; i <= value; i++){
            j = startingPos[a[i].col]++;
            b[j].row = a[i].col;
            b[j].col = a[i].row;
            b[j].value = a[i].value;
        }
    }
}

void printf_transpose(txt * b)
{
    int i;
    printf("\nprintf_transpose_matrix");
    for(i = 0; i < 9; i ++)
        printf("\n%d %d %d",b[i].row, b[i].col, b[i].value);
}

//gangdaechan@gangdaechan-ui-MacBookPro test % ./main
//6 6 8 
//0 0 15 
//0 3 22 
//0 5 -15 
//1 1 11 
//1 2 3 
//2 3 -6 
//4 0 91 
//5 2 28 
//
//printf_transpose_matrix
//6 6 8
//0 0 15
//0 4 91
//1 1 11
//2 1 3
//2 5 28
//3 0 22
//3 2 -6
//5 0 -15%   
//입력과 출력 파일인 희소행렬(sparse matrix)을 전치
#include <stdio.h>
#include <stdlib.h>

typedef struct txt{
    int row;
    int col;
    int value;
}txt;

void print_a_txt(FILE *fp,txt *a);
void transpose(txt *a, txt *b);
void printf_transpose(txt * b);
void print_matrix_a(txt *a);
void print_matrix_b(txt *b);

int main(void)
{
    FILE *fp = fopen("a.txt","r");

    txt a[9]; //atxt 
    txt b[9]; 

    print_a_txt(fp,a);

    transpose(a,b);
    printf_transpose(b);
    print_matrix_a(a);
    print_matrix_b(b);

}

void print_a_txt(FILE *fp, txt *a)
{
    int i;
    for(i = 0; i < 9; i++){
        fscanf(fp, "%d %d %d",&a[i].row,&a[i].col,&a[i].value);
    }

    for(i = 0; i < 9; i++){
        printf( "%d %d %d \n",a[i].row,a[i].col,a[i].value);
    }
}

void transpose( txt *a, txt *b)
{
    int rowTerms[9], startingPos[9];
    int i, j;
    int value = a[0].value;

    b[0].row = a[0].col;
    b[0].col = a[0].row;
    b[0].value = value;

    if(value != 0){
        for(i = 0; i < value; i++)
            rowTerms[i] = 0; //rowterms 0으로 초기화

        for(i = 1; i <= value; i++)
            rowTerms[a[i].col]++; //열이 행으로 바꿀때 원소가 몇개 있는지 ++
        
        startingPos[0] = 1; //a[0] 밑 a[1]부터 시작하니까 무조건 1

        for(i = 1; i < value; i++)
            startingPos[i] = startingPos[i - 1] + rowTerms[i - 1]; //statingPos 전값이랑 row전값 더한게 이번값

        for(i = 1; i <= value; i++){
            j = startingPos[a[i].col]++;
            b[j].row = a[i].col;
            b[j].col = a[i].row;
            b[j].value = a[i].value;
        }
    }
}

void printf_transpose(txt * b)
{
    int i;
    printf("\nprintf_transpose_matrix");
    for(i = 0; i < 9; i ++)
        printf("\n%d %d %d",b[i].row, b[i].col, b[i].value);
}

void print_matrix_a(txt *a)
{
    printf("\n\nprint_matrix_A\n");

    int value = a[0].value ,rows = a[0].row, cols = a[0].col;
    int ary[9][9] = {0,};
    int i, j;
    
    for(i = 0; i < rows + rows/2; i++){
            ary[a[i].row][a[i].col] = a[i].value;
    }

    for(i = 0; i < a[0].row; i++){
        for(j = 0; j < a[0].col; j++){
            printf("%-4d",ary[i][j]);
        }
        putchar('\n');
    }
}

void print_matrix_b(txt *b)
{
    printf("\n\nprint_matrix_B\n");

    int value = b[0].value ,rows = b[0].row, cols = b[0].col;
    int ary[9][9] = {0,};
    int i, j;
    
    for(i = 0; i < rows + rows/2; i++){
            ary[b[i].row][b[i].col] = b[i].value;
    }

    for(i = 0; i < b[0].row; i++){
        for(j = 0; j < b[0].col; j++){
            printf("%-4d",ary[i][j]);
        }
        putchar('\n');
    }
    
}

//. 위 문제 matrix 전치
#include <stdio.h>
#include <stdlib.h>

typedef struct txt{
    int row;
    int col;
    int value;
}txt;

void print_a_txt(FILE *fp,txt *a);
void transpose(txt *a, txt *b);
void printf_transpose(txt * b);
void print_matrix_a(txt *a);
void print_matrix_b(txt *b);

int main(void)
{
    FILE *fp = fopen("a.txt","r");

    txt a[9]; //atxt 
    txt b[9]; 

    print_a_txt(fp,a);

    transpose(a,b);
    printf_transpose(b);
    print_matrix_a(a);
    print_matrix_b(b);

}

void print_a_txt(FILE *fp, txt *a)
{
    int i;
    for(i = 0; i < 9; i++){
        fscanf(fp, "%d %d %d",&a[i].row,&a[i].col,&a[i].value);
    }

    for(i = 0; i < 9; i++){
        printf( "%d %d %d \n",a[i].row,a[i].col,a[i].value);
    }
}

void transpose( txt *a, txt *b)
{
    int rowTerms[9], startingPos[9];
    int i, j;
    int value = a[0].value;

    b[0].row = a[0].col;
    b[0].col = a[0].row;
    b[0].value = value;

    if(value != 0){
        for(i = 0; i < value; i++)
            rowTerms[i] = 0; //rowterms 0으로 초기화

        for(i = 1; i <= value; i++)
            rowTerms[a[i].col]++; //열이 행으로 바꿀때 원소가 몇개 있는지 ++
        
        startingPos[0] = 1; //a[0] 밑 a[1]부터 시작하니까 무조건 1

        for(i = 1; i < value; i++)
            startingPos[i] = startingPos[i - 1] + rowTerms[i - 1]; //statingPos 전값이랑 row전값 더한게 이번값

        for(i = 1; i <= value; i++){
            j = startingPos[a[i].col]++;
            b[j].row = a[i].col;
            b[j].col = a[i].row;
            b[j].value = a[i].value;
        }
    }
}

void printf_transpose(txt * b)
{
    int i;
    printf("\nprintf_transpose_matrix");
    for(i = 0; i < 9; i ++)
        printf("\n%d %d %d",b[i].row, b[i].col, b[i].value);
}

void print_matrix_a(txt *a)
{
    printf("\n\nprint_matrix_A\n");

    int value = a[0].value ,rows = a[0].row, cols = a[0].col;
    int ary[9][9] = {0,};
    int i, j;
    
    for(i = 0; i < rows + rows/2; i++){
            ary[a[i].col][a[i].row] = a[i].value;
    }

    for(i = 0; i < a[0].row; i++){
        for(j = 0; j < a[0].col; j++){
            printf("%-4d",ary[i][j]);
        }
        putchar('\n');
    }
}

void print_matrix_b(txt *b)
{
    printf("\n\nprint_matrix_B\n");

    int value = b[0].value ,rows = b[0].row, cols = b[0].col;
    int ary[9][9] = {0,};
    int i, j;
    
    for(i = 0; i < rows + rows/2; i++){
            ary[b[i].col][b[i].row] = b[i].value;
    }

    for(i = 0; i < b[0].row; i++){
        for(j = 0; j < b[0].col; j++){
            printf("%-4d",ary[i][j]);
        }
        putchar('\n');
    }
    
}
//gangdaechan@gangdaechan-ui-MacBookPro test % cc main.c -o main
//gangdaechan@gangdaechan-ui-MacBookPro test % ./main
//6 6 8 
//0 0 15 
//0 3 22 
//0 5 -15 
//1 1 11 
//1 2 3 
//2 3 -6 
//4 0 91 
//5 2 28 
//
//printf_transpose_matrix
//6 6 8
//0 0 15
//0 4 91
//1 1 11
//2 1 3
//2 5 28
//3 0 22
//3 2 -6
//5 0 -15
//
//print_matrix_A
//15  0   0   0   91  0   
//0   11  0   0   0   0   
//0   3   0   0   0   28  
//22  0   -6  0   0   0   
//0   0   0   0   0   0   
//-15 0   0   0   0   0   
//
//
//print_matrix_B
//15  0   0   22  0   -15 
//0   11  3   0   0   0   
//0   0   0   -6  0   0   
//0   0   0   0   0   0   
//91  0   0   0   0   0   
//0   0   28  0   0   0