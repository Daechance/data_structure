#include <stdio.h>
#include <stdlib.h>

#define MAX_EXPR_LEN 80
#define MAX_STACK_SIZE 20

typedef enum {
	lparen, rparen, plus, minus, 
	times, divide, mod, eos, operand 
} precedence;

int top = -1;
int stack[MAX_STACK_SIZE];
char expr[MAX_EXPR_LEN];

void stackFull()
{
	fprintf(stderr,"stack is full cannot add");
	exit(EXIT_FAILURE);
}

void push(int item)
{
	if(top >= MAX_STACK_SIZE -1)
		stackFull();

	stack[++top] = item;
}

int stackEmpty()
{
	fprintf(stderr,"stack is empty cannot delete element");
	int err;
	exit(EXIT_FAILURE);
	return err;
}
int pop()
{
	if(top == -1)
		stackEmpty();

	return stack[top--];
}
precedence getToken(char *symbol, int *n)
{
	*symbol = expr[(*n)++];
	switch (*symbol){
		case '(': return lparen;
		case ')':  return rparen;
		case '+': return plus;
		case '-': return minus;
		case '/': return divide;
		case '*': return times;
		case '%': return mod;
		case '\0': return eos;
		default: return operand; //연산자가 아닌것들
	}
}

int eval(void)
{
	precedence token;
	char symbol;
	int op1, op2;
	int n = 0; /* counter for the expression string */
	top = -1;
	token = getToken(&symbol, &n);

	while(token != eos){
		if(token == operand)
			push(symbol - '0'); //연산자가 아닌것들은 전부 아스키코드 에서 정수형으로 바꿔줌
		else {
			op2 = pop(); //stack delete
			op1 = pop();
			switch (token)
			{
				case plus: push(op1 + op2);
					break;
				case minus: push(op1 - op2);
					break;
				case times: push(op1 * op2);
					break;
				case divide: push(op1 / op2);
					break;
				case mod : push(op1 % op2);
			}
		}
		token = getToken(&symbol, &n);
	}
	return pop();
}
int main(void)
{
	FILE *fp = fopen("input.txt","r");

	fgets(expr, MAX_EXPR_LEN, fp);
	printf("postfix sexpression : %s\n",expr);

	int a = eval();
	
	printf("the evalution value : %d \n", a);


	fclose(fp);
	return 0;
}

//gangdaechan@gangdaechan-ui-MacBookPro test % cc main.c -o main
//main.c:79:11: warning: 4 enumeration values not handled in switch: 'lparen', 'rparen', 'eos'... [-Wswitch]
//                        switch(token) {
//                               ^
//main.c:79:11: note: add missing switch cases
//                        switch(token) {
//                               ^
//1 warning generated.
//gangdaechan@gangdaechan-ui-MacBookPro test % ./main
//postfix sexpression : 82/3-42*+
//the evalution value : 9 
//gangdaechan@gangdaechan-u



#include <stdio.h>
#include <stdlib.h>

#define MAX_STACK_SIZE 20
#define MAX_EXPR_LEN 80

typedef enum {
	lparen, rparen, plus, minus,
	times, divide, mod, eos, operand
} precedence;
int isp[] = { 0, 19, 12, 12, 13, 13,13, 0 };
int icp[] = { 20, 19, 12, 12, 13, 13,13, 0 };

char expr[MAX_EXPR_LEN]; // postfix expression 
precedence stack[MAX_STACK_SIZE];
int top = -1;
FILE *fp2;

int stackEmpty() {
	fprintf(stderr, "stack is empty, cannot delete element.\n");
	int err;
	exit(EXIT_FAILURE);
	return err;
}

void stackFull() {
	fprintf(stderr, "stack is full, cannot add element\n");
	exit(EXIT_FAILURE);
}

int pop() {
	if (top == -1)
		return stackEmpty();

	return stack[top--];
}

void push(int item) {
	if (top >= MAX_STACK_SIZE - 1)
		stackFull();
	stack[++top] = item;
}

precedence getToken(char* symbol, int* n)
{ 
	*symbol = expr[(*n)++];
	switch (*symbol) {
		case '(': return lparen;
		case ')':  return rparen;
		case '+': return plus;
		case '-': return minus;
		case '/': return divide;
		case '*': return times;
		case '%': return mod;
		case '\0': return eos;
		default: return operand; 
	}
}

void printToken(precedence pre)
{
	switch (pre){
		case plus:	printf("%c", '+');	fprintf(fp2, "%c", '+');	break;
		case minus:	printf("%c", '-');  fprintf(fp2, "%c", '-');	break;
		case divide:  printf("%c", '/');  fprintf(fp2, "%c", '/');	break;
		case times:	printf("%c", '*');	fprintf(fp2, "%c", '*');	break;
		case mod:	printf("%c", '%');	fprintf(fp2, "%c", '%');	break;
		default:; // operand
	}
}

void postfix(void) {
	char symbol;
	precedence token;
	int n = 0;
	top = 0;
	stack[0] = eos;

	for (token = getToken(&symbol, &n); token != eos; token = getToken(&symbol, &n)) {
		if (token == operand) {
			printf("%c", symbol);
			fprintf(fp2, "%c", symbol);
		}
		else if (token == rparen) {
			while (stack[top] != lparen)
				printToken(pop());
			pop();
		}
		else {
			while (isp[stack[top]] >= icp[token])
				printToken(pop());
			push(token);
		}
	}
	while ((token = pop()) != eos)
		printToken(token);
	printf("\n");
}

int main(void)
{
	FILE *fp = fopen("input.txt","r");
	fp2 = fopen("output.txt","w");

	fgets(expr, MAX_EXPR_LEN, fp);
	printf("<<<<<<<<<< infix to postfix >>>>>>>>>>>>>\n");
	printf("infix expression\t: %s\n", expr);
	printf("postfix expression\t: ");

	postfix();

	fclose(fp);
	fclose(fp2);

}


gangdaechan@gangdaechan-ui-MacBookPro test % cc main.c -o main
gangdaechan@gangdaechan-ui-MacBookPro test % ./main
<<<<<<<<<< infix to postfix >>>>>>>>>>>>>
infix expression        : (4/(2-2+3))*(3-4)*2
postfix expression      : 422-3+/34-*2*