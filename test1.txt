//자구 1번문제
#include <stdio.h>

void ary1D(int * p, int size);

int main(void)
{
	int ary[3] = { 8, 2, 8};
	int i;

	printf("ary를 이용한 출력 \n");
	for(i = 0; i < 3; i++){
		printf("%-2d",ary[i]);
	}
	printf("\n\n");

	
	printf("p를 이용한 출력 \n");
	ary1D(ary,3);

	return 0;
}

void ary1D(int * p, int size)
{
	int i = 0;


	for(i = 0; i < size; i++){
		printf("%-2d",p[i]);
	}
}

//2번 문제
#include <stdio.h>

void print2Dary(int ary[][3],int row, int col);

int main(void)
{
	int i,j;
	int ary[2][3];
	ary[0][0] = 4;  
	ary[0][1] = 2;
	ary[0][2] = 3;  // 4 2 3
					// 5 2 3
	ary[1][0] = 5;  
	ary[1][1] = 2;
	ary[1][2] = 3;

	for (i = 0; i < 2; i++){
		for(j = 0; j < 3; j++){
			printf("%d", ary[i][j]);
		}
		printf("\n");
	}
	printf("\n\n");


	print2Dary(ary,2,3);

	return 0;
}

void print2Dary(int ary[][3], int row, int col)
{
	int i,j;

	for (i = 0; i < row; i++){
		for(j = 0; j < col; j++){
			printf("%d", ary[i][j]);
		}
		printf("\n");
	}
}

//3번 문제
#include <stdio.h>

void print2Dary(int ary1[][3],int ary2[][3],int row, int col);

int main(void)
{
	int i,j;
	int ary1[2][3];
	ary1[0][0] = 1;  
	ary1[0][1] = 2;
	ary1[0][2] = 3;  
	ary1[1][0] = 4;  
	ary1[1][1] = 5;
	ary1[1][2] = 6;


	int ary2[2][3];
	ary2[0][0] = 7;  
	ary2[0][1] = 8;
	ary2[0][2] = 9;  
	ary2[1][0] = 10;  
	ary2[1][1] = 11;
	ary2[1][2] = 12;

	for (i = 0; i < 2; i++){
		for(j = 0; j < 3; j++){
			printf("%4d", ary1[i][j]);
		}
		printf("\n");
	}
	printf("\n");

	for (i = 0; i < 2; i++){
		for(j = 0; j < 3; j++){
			printf("%4d", ary2[i][j]);
		}
		printf("\n");
	}
	printf("\n\n");


	print2Dary(ary1,ary2,2,3);

	return 0;
}

void print2Dary(int ary1[][3], int ary2[][3],int row, int col)
{
	int i,j;

	for (i = 0; i < 2; i++){
		for(j = 0; j < 3; j++){
			printf("%4d", ary1[i][j]);
		}
		printf("\n");
	}
	printf("\n");

	for (i = 0; i < 2; i++){
		for(j = 0; j < 3; j++){
			printf("%4d", ary2[i][j]);
		}
		printf("\n");
	}
}

//4번 문제 
#include <stdio.h>

int printary(int * ary);

int main(void)
{
	int ary[3] = {2,3,4};

	printf("포인터 배열의 배열요소를 이용한 a, b, c출력 \n");

	printary(ary);

	return 0;
}

int printary(int * ary)
{
	int i;
	char ch1 = 97;

		for(i = 0; i < 3; i++){
			printf("%c : %d ",ch1 ,ary[i]);
			ch1 ++;
		}

	return 0;
}

//2 -1번문제
#include <stdio.h>

int sumAry1D_f1( int ary[], int size ); // 배열파라미터, 배열크기 // 권장 - 
int sumAry1D_f2( int *ary, int size ); // 배열포인터, 배열크기
int sumAry1D_f3( int ary[6], int size );


int main(void) {

	int ary1D[ ] = {1, 2, 3, 4, 5, 6};

	printf("sumAry1D_f1() %d\n", sumAry1D_f1(ary1D,6));
	printf("sumAry1D_f2() %d\n\n", sumAry1D_f2(ary1D,6));
	printf("sumAry1D_f3() %d\n\n", sumAry1D_f3(ary1D,6));

	return 0;
}


int sumAry1D_f1( int ary[], int size )
{
	int i, sum =0;

	for (i = 0; i < size; i++){
		sum += ary[i];
	}

	return sum;
}
int sumAry1D_f2( int *ary, int size )
{

	int i, sum = 0;

	for (i = 0; i < size; i++){
		sum += ary[i];
	}

	return sum;
}
int sumAry1D_f3( int ary[6], int size )
{

	int i, sum = 0;

	for (i = 0; i < size; i++){
		sum += ary[i];
	}

	return sum;
}

//2-2#include <stdio.h>

int sumAry2D_f1( int ary[][3], int ROW, int COL ); // 배열파라미터 // 권장 - 
int sumAry2D_f2( int (*ary)[3], int ROW, int COL ); // 배열포인터
int sumAry2D_f3( int ary[2][3], int ROW, int COL );


int main(void) {

	int ary2D[ ][3] = { {1, 2, 3}, {4, 5, 6}};

 	printf("sumAry2D_f1() %d\n", sumAry2D_f1(ary2D,2,3));
 	printf("sumAry2D_f2() %d\n\n", sumAry2D_f2(ary2D,2,3));
 	printf("sumAry2D_f3() %d\n\n", sumAry2D_f3(ary2D,2,3));

	return 0;
}

int sumAry2D_f1(int ary[][3], int ROW, int COL)
{
	int i, j, sum =0;

	for (i = 0; i < ROW; i++){
		for(j = 0; j < COL; j++){
			sum += ary[i][j];
		}
	}

	return sum;
}
int sumAry2D_f2( int (*ary)[3], int ROW, int COL )
{
	int i, j, sum =0;

	for (i = 0; i < ROW; i++){
		for(j = 0; j < COL; j++){
			sum += ary[i][j];
		}
	}

	return sum;
}
int sumAry2D_f3( int ary[2][3], int ROW, int COL)
{
	int i, j, sum =0;

	for (i = 0; i < ROW; i++){
		for(j = 0; j < COL; j++){
			sum += ary[i][j];
		}
	}

	return sum;
}

2-3
#include <stdio.h>


int sumAry3D_f1( int ary[][2][3], int SEC, int ROW, int COL ); // 배열파라미터 //권장 
int sumAry3D_f2( int (*ary)[2][3], int SEC, int ROW, int COL ); // 배열포인터
int sumAry3D_f3( int ary[2][2][3], int SEC, int ROW, int COL );

int main(void)
{
	
	int ary3D[ ][2][3] = { {{1, 2, 3}, {4, 5, 6}}, {{7, 8, 9}, {10, 11, 12}} };

	printf("sumAry3D_f1() %d\n", sumAry3D_f1(ary3D,2,2,3));
 	printf("sumAry3D_f2() %d\n", sumAry3D_f2(ary3D,2,2,3));
 	printf("sumAry3D_f3() %d\n\n", sumAry3D_f3(ary3D,2,2,3));

	return 0;
}


int sumAry3D_f1( int ary[][2][3], int SEC, int ROW, int COL )
{
	int i, j, k, sum = 0;

	for(i = 0; i < SEC; i++){
		for(j = 0; j < ROW; j++){
			for(k =0; k < COL; k++)
			sum += ary[i][j][k];
		}
	}

	return sum;
}
int sumAry3D_f2( int (*ary)[2][3], int SEC, int ROW, int COL )
{
	int i, j, k, sum = 0;

	for(i = 0; i < SEC; i++){
		for(j = 0; j < ROW; j++){
			for(k =0; k < COL; k++)
			sum += ary[i][j][k];
		}
	}

	return sum;
}
int sumAry3D_f3( int ary[2][2][3], int SEC, int ROW, int COL )
{
	int i, j, k, sum = 0;

	for(i = 0; i < SEC; i++){
		for(j = 0; j < ROW; j++){
			for(k =0; k < COL; k++)
			sum += ary[i][j][k];
		}
	}

	return sum;
}

//2-4

#include <stdio.h>
#include <stdlib.h>
int main(void)
{

	//int  i,*pi;
	//float f, *pf;
//
	//pi = (int *)malloc(sizeof(int));
	//pf = (float *)malloc(sizeof(float));
//
	//*pi = 1024;
	//*pf = 3.14;
//
	//printf("an integer = %d, a float = %f\n", *pi, *pf);
	//free(pi);
	//free(pf);

	printf("\n");

	int *ary;
	int i;
	ary = (int *)malloc(sizeof(int)*5);

	for(i = 0; i < 5; i++){
		printf("%d", ary[i]);
	}
	

	for(i = 0; i < 5; i++){
		free(ary[i]);
	}

	free(ary);
	
	return 0;

}

/*
5번

#include <stdio.h>
#include <stdlib.h>
#define max_size 100

void selection_sort(int  *ary, int size);
void printselection_sort(int *num, int size);
int binarySearch(int *ary, int size, int value);

int main(void)
{
	int ary[max_size], i, size, value;

	printf("정수 입력할 개수");
	scanf("%d", &size);
	printf("정수 %d개를 입력하시오", size);


	for(i = 0; i < size; i++) scanf("%d", &ary[i]);


	selection_sort(ary,size);
	printselection_sort(ary,size);

	printf("\n찾아낼 수 입력하세요 : "); 
	scanf("%d", &value);

	if(binarySearch(ary, size, value) != -1){
		printf("have numbers list[%d]", binarySearch(ary,size,value));
	}else{
		printf("don't have numbers");
	}

}

void selection_sort(int  *ary, int size)
{
	int smaller, temp;	//임시저장소 smaller 은 가장 작은수 확인, temp는 변수 교환용
	int arrCnt = 0;	//비교대상이 되는 배열 요소번호 할당할 변수
	int i;

	for (i = 0; i < size; i++) {	//정렬할 카운터를 기준으로 0번에서 부터 
		smaller = ary[i];		//smaller 변수에 비교할 배열중 제일 앞에수를 할당
		arrCnt = i;			//arrCnt 변수에 비교할 대상 인덱스를 할당

		while (arrCnt < size) {
			if (ary[arrCnt] < smaller) {	//스몰러와 배열의 요소를 비교하여 최솟값이 smaller에 할당됨
				temp = smaller;
				smaller = ary[arrCnt];
				ary[arrCnt] = temp;
			}
			arrCnt++;
		}
		ary[i] = smaller;				//i 번째 요소에 최솟값을 할당
	}
}

void printselection_sort(int *ary, int size)
{
	printf("오름차순 정렬후 출력 : ");
	for (int i = 0; i < size; i++) 
	{
		printf("%d ", ary[i]);
	}
}

int binarySearch(int *ary, int size, int value)
{
	int middle, left = 0, right = size - 1;

	while (left < right){
		middle = (left + right)/2;
		if(ary[middle] > value) right = middle = -1;
		else if(ary[middle] == value) return middle+1;
		else left = middle + 1;
	}
	return -1;
}


*/